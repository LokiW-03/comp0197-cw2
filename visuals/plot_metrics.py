import matplotlib.pyplot as plt

# Define the epochs for each evaluation
epochs = [2, 4, 6, 8, 10]

# Define metrics for each model
SegNet = {
    "loss": [0.33354676449679005, 0.34764010860244793, 0.30011716550005396, 0.30797743418782697, 0.28880644964729935],
    "accuracy": [0.8806738425711255, 0.8754297662054235, 0.892405097411159, 0.8851698923416377, 0.8963890073084317],
    "precision": [0.8247642098606429, 0.8276853146491957, 0.8468413916846718, 0.8412769804146414, 0.8378877713687415],
    "recall": [0.7908227044543767, 0.7773366488920437, 0.8095894916468922, 0.7876330721310095, 0.8265728280374678],
    "iou": [0.6943905553690385, 0.6856101320010175, 0.7200663148723269, 0.699479486221642, 0.7303617056464266],
    "dice": [0.8033147328034446, 0.7974740277359484, 0.8242141409315378, 0.806601063680116, 0.8314739012952136]
}

EffUNet = {
    "loss": [0.22037291941460163, 0.21514971646066255, 0.2182117817950333, 0.21900383310134094, 0.21814251732325873],
    "accuracy": [0.9215033844044307, 0.923748648290122, 0.9240280239352676, 0.9229086142334895, 0.9255176165280014],
    "precision": [0.8806631352440737, 0.8846585806789174, 0.872775933111549, 0.8743283503320048, 0.8819319699238808],
    "recall": [0.8507026786958856, 0.8527641278029333, 0.8776737515885422, 0.8672968279148974, 0.8652969258914822],
    "iou": [0.7748128150067625, 0.7789944079241333, 0.790190718144089, 0.7848323870985343, 0.787868523929125],
    "dice": [0.8622118298316658, 0.8650018179504382, 0.8743707314113337, 0.8701343902874851, 0.8719934717645175]
}

SegNeXt = {
    "loss": [0.453, 0.408, 0.362, 0.339, 0.321],
    "accuracy": [0.8327873007547436, 0.8497660986796879, 0.8667794231921394, 0.8754331270528769, 0.8747219547942082],
    "precision": [0.7708596376477291, 0.7791214223030186, 0.802101147714185, 0.808336283894838, 0.8077499509734982],
    "recall": [0.7033444631973708, 0.7495769379606166, 0.7768988249801622, 0.7958814715065466, 0.7949729933827084],
    "iou": [0.597264867138882, 0.6407289959065886, 0.6725964489669363, 0.6900657251960545, 0.6890614690687066],
    "dice": [0.7200244112799752, 0.7607908086446625, 0.7870774110548175, 0.800580662045436, 0.799974248532087]
}

UNet = {
    "loss": [0.6843465238963917, 0.5353609129205715, 0.45942829328780277, 0.4120703149585901, 0.36558702639254603],
    "accuracy": [0.7262632395533003, 0.7820407888745703, 0.8230137384922311, 0.8429496293335658, 0.8608500814366387],
    "precision": [0.617673754123486, 0.7068953797257737, 0.7779321460965609, 0.7970278884156519, 0.8009099643540402],
    "recall": [0.5506195287250895, 0.6630355052773846, 0.6918582337920884, 0.7270869052387382, 0.7735670949887047],
    "iou": [0.4252009847470219, 0.530261821076213, 0.58210449678172, 0.6239935750693578, 0.6648597402447867],
    "dice": [0.5448872730334925, 0.662650050633478, 0.7076205455759755, 0.747670831895388, 0.7827826741606638]
}

# Choose the metrics you want to plot
metrics = ['loss', 'accuracy', 'precision', 'recall', 'iou', 'dice']
models = [SegNet, EffUNet, SegNeXt, UNet]
labels = ['SegNet', 'EffUNet', 'SegNeXt', 'UNet']

# Loop over each metric and create a separate figure
for metric in metrics:
    plt.figure(figsize=(8, 6))
    for model, label in zip(models, labels):
        plt.plot(epochs, model[metric], marker='o', label=label)
    plt.title(f'{metric.capitalize()} vs Epoch')
    plt.xlabel('Epoch')
    plt.ylabel(metric.capitalize())
    plt.legend()
    plt.grid(True)
    
    # Save the plot to a PNG file
    filename = f"{metric}_plot.png"
    plt.savefig("visuals/FS_" + filename, bbox_inches='tight')
    print(f"Saved {filename}")
    plt.close()

